# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError

from .. import models


class TextOperations(object):
    """TextOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def screen_text(
            self, custom_headers=None, raw=False, **operation_config):
        """Detect profanity and match against custom and shared blacklists.

        Detects profanity in more than 100 languages and match against custom
        and shared blacklists.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Screen or ClientRawResponse if raw=true
        :rtype: ~azure.cognitiveservices.vision.contentmoderator.models.Screen
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/contentmoderator/moderate/v1.0/ProcessText/Screen/'
        path_format_arguments = {
            'azureRegion': self._serialize.url("self.config.azure_region", self.config.azure_region, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['language'] = self._serialize.query("self.config.language", self.config.language, 'str')
        if self.config.autocorrect is not None:
            query_parameters['autocorrect'] = self._serialize.query("self.config.autocorrect", self.config.autocorrect, 'bool')
        if self.config.pii is not None:
            query_parameters['PII'] = self._serialize.query("self.config.pii", self.config.pii, 'bool')
        if self.config.list_id is not None:
            query_parameters['listId'] = self._serialize.query("self.config.list_id", self.config.list_id, 'str')
        if self.config.classify is not None:
            query_parameters['classify'] = self._serialize.query("self.config.classify", self.config.classify, 'bool')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'text/plain'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Content-Type'] = self._serialize.header("self.config.content_type", self.config.content_type, 'str')

        # Construct body
        body_content = self._serialize.body(self.config.text_content, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Screen', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def detect_language(
            self, custom_headers=None, raw=False, **operation_config):
        """This operation will detect the language of given input content. Returns
        the <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3
        code</a> for the predominant language comprising the submitted text.
        Over 110 languages supported.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: DetectedLanguageResult or ClientRawResponse if raw=true
        :rtype:
         ~azure.cognitiveservices.vision.contentmoderator.models.DetectedLanguageResult
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = '/contentmoderator/moderate/v1.0/ProcessText/DetectLanguage'
        path_format_arguments = {
            'azureRegion': self._serialize.url("self.config.azure_region", self.config.azure_region, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'text/plain'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Ocp-Apim-Subscription-Key'] = self._serialize.header("self.config.ocp_apim_subscription_key", self.config.ocp_apim_subscription_key, 'str')
        header_parameters['Content-Type'] = self._serialize.header("self.config.content_type", self.config.content_type, 'str')

        # Construct body
        body_content = self._serialize.body(self.config.text_content, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('DetectedLanguageResult', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
