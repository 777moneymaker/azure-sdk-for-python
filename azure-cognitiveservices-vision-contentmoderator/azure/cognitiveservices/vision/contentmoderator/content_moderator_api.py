# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.exceptions import HttpOperationError
from .operations.images_operations import ImagesOperations
from .operations.text_operations import TextOperations
from .operations.image_list_operations import ImageListOperations
from .operations.terms_list_operations import TermsListOperations
from .operations.termlist_operations import TermlistOperations
from .operations.termlists_operations import TermlistsOperations
from .operations.reviews_operations import ReviewsOperations
from .operations.jobs_operations import JobsOperations
from . import models


class ContentModeratorAPIConfiguration(Configuration):
    """Configuration for ContentModeratorAPI
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param language: <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO
     639-3 code</a>.
    :type language: str
    :param cache_image: Whether to retain the submitted image for future use;
     defaults to false if omitted.
    :type cache_image: bool
    :param enhanced: When set to True, the image goes through additional
     processing to come with additional candidates.
     image/tiff is not supported when enhanced is set to true
     Note: This impacts the response time.
    :type enhanced: bool
    :param image_id: Id of the image.
    :type image_id: str
    :param list_id: The list Id.
    :type list_id: str
    :param autocorrect: Autocorrect text.
    :type autocorrect: bool
    :param pii: Detect personal identifiable information.
    :type pii: bool
    :param classify: Classify input.
    :type classify: bool
    :param text_content: Content to screen.
    :type text_content: str
    :param text_content1: Text content whose language is to be detected.
    :type text_content1: str
    :param term: Term to be deleted
    :type term: str
    :param label: The image label.
    :type label: str
    :param language1: Language of the terms.
    :type language1: str
    :param body: Schema of the body.
    :type body: ~azure.cognitiveservices.vision.contentmoderator.models.Body
    :param tag: Tag for the image.
    :type tag: float
    :param list_id1: List Id of the image list.
    :type list_id1: str
    :param content_type: The content type.
    :type content_type: str
    :param image_url: The image url.
    :type image_url:
     ~azure.cognitiveservices.vision.contentmoderator.models.ImageUrl
    :param image_stream: The image file.
    :type image_stream: Generator
    :param ocp_apim_subscription_key: The subscription key in header
    :type ocp_apim_subscription_key: str
    :param azure_region1: Supported Azure regions for Computer Vision
     endpoints. Possible values include: 'westus', 'westeurope',
     'southeastasia', 'eastus2', 'westcentralus'
    :type azure_region1: str or
     ~azure.cognitiveservices.vision.contentmoderator.models.AzureRegion
    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    """

    def __init__(
            self, language, image_id, text_content, text_content1, term, language1, body, list_id1, content_type, image_url, image_stream, ocp_apim_subscription_key, azure_region1, credentials, cache_image=None, enhanced=None, list_id=None, autocorrect=None, pii=None, classify=None, label=None, tag=None):

        if language is None:
            raise ValueError("Parameter 'language' must not be None.")
        if image_id is None:
            raise ValueError("Parameter 'image_id' must not be None.")
        if text_content is None:
            raise ValueError("Parameter 'text_content' must not be None.")
        if text_content1 is None:
            raise ValueError("Parameter 'text_content1' must not be None.")
        if term is None:
            raise ValueError("Parameter 'term' must not be None.")
        if language1 is None:
            raise ValueError("Parameter 'language1' must not be None.")
        if body is None:
            raise ValueError("Parameter 'body' must not be None.")
        if list_id1 is None:
            raise ValueError("Parameter 'list_id1' must not be None.")
        if content_type is None:
            raise ValueError("Parameter 'content_type' must not be None.")
        if image_url is None:
            raise ValueError("Parameter 'image_url' must not be None.")
        if image_stream is None:
            raise ValueError("Parameter 'image_stream' must not be None.")
        if ocp_apim_subscription_key is None:
            raise ValueError("Parameter 'ocp_apim_subscription_key' must not be None.")
        if azure_region1 is None:
            raise ValueError("Parameter 'azure_region1' must not be None.")
        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        base_url = 'https://{azureRegion}.api.cognitive.microsoft.com/'

        super(ContentModeratorAPIConfiguration, self).__init__(base_url)

        self.add_user_agent('contentmoderatorapi/{}'.format(VERSION))

        self.language = language
        self.cache_image = cache_image
        self.enhanced = enhanced
        self.image_id = image_id
        self.list_id = list_id
        self.autocorrect = autocorrect
        self.pii = pii
        self.classify = classify
        self.text_content = text_content
        self.text_content1 = text_content1
        self.term = term
        self.label = label
        self.language1 = language1
        self.body = body
        self.tag = tag
        self.list_id1 = list_id1
        self.content_type = content_type
        self.image_url = image_url
        self.image_stream = image_stream
        self.ocp_apim_subscription_key = ocp_apim_subscription_key
        self.azure_region1 = azure_region1
        self.credentials = credentials


class ContentModeratorAPI(object):
    """You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.
    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.
    Text can be at most 1024 characters long.
    If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
    This API is currently available in:
    * West US - westus.api.cognitive.microsoft.com
    * East US 2 - eastus2.api.cognitive.microsoft.com
    * West Central US - westcentralus.api.cognitive.microsoft.com
    * West Europe - westeurope.api.cognitive.microsoft.com
    * Southeast Asia - southeastasia.api.cognitive.microsoft.com .

    :ivar config: Configuration for client.
    :vartype config: ContentModeratorAPIConfiguration

    :ivar images: Images operations
    :vartype images: azure.cognitiveservices.vision.contentmoderator.operations.ImagesOperations
    :ivar text: Text operations
    :vartype text: azure.cognitiveservices.vision.contentmoderator.operations.TextOperations
    :ivar image_list: ImageList operations
    :vartype image_list: azure.cognitiveservices.vision.contentmoderator.operations.ImageListOperations
    :ivar terms_list: TermsList operations
    :vartype terms_list: azure.cognitiveservices.vision.contentmoderator.operations.TermsListOperations
    :ivar termlist: Termlist operations
    :vartype termlist: azure.cognitiveservices.vision.contentmoderator.operations.TermlistOperations
    :ivar termlists: Termlists operations
    :vartype termlists: azure.cognitiveservices.vision.contentmoderator.operations.TermlistsOperations
    :ivar reviews: Reviews operations
    :vartype reviews: azure.cognitiveservices.vision.contentmoderator.operations.ReviewsOperations
    :ivar jobs: Jobs operations
    :vartype jobs: azure.cognitiveservices.vision.contentmoderator.operations.JobsOperations

    :param language: <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO
     639-3 code</a>.
    :type language: str
    :param cache_image: Whether to retain the submitted image for future use;
     defaults to false if omitted.
    :type cache_image: bool
    :param enhanced: When set to True, the image goes through additional
     processing to come with additional candidates.
     image/tiff is not supported when enhanced is set to true
     Note: This impacts the response time.
    :type enhanced: bool
    :param image_id: Id of the image.
    :type image_id: str
    :param list_id: The list Id.
    :type list_id: str
    :param autocorrect: Autocorrect text.
    :type autocorrect: bool
    :param pii: Detect personal identifiable information.
    :type pii: bool
    :param classify: Classify input.
    :type classify: bool
    :param text_content: Content to screen.
    :type text_content: str
    :param text_content1: Text content whose language is to be detected.
    :type text_content1: str
    :param term: Term to be deleted
    :type term: str
    :param label: The image label.
    :type label: str
    :param language1: Language of the terms.
    :type language1: str
    :param body: Schema of the body.
    :type body: ~azure.cognitiveservices.vision.contentmoderator.models.Body
    :param tag: Tag for the image.
    :type tag: float
    :param list_id1: List Id of the image list.
    :type list_id1: str
    :param content_type: The content type.
    :type content_type: str
    :param image_url: The image url.
    :type image_url:
     ~azure.cognitiveservices.vision.contentmoderator.models.ImageUrl
    :param image_stream: The image file.
    :type image_stream: Generator
    :param ocp_apim_subscription_key: The subscription key in header
    :type ocp_apim_subscription_key: str
    :param azure_region1: Supported Azure regions for Computer Vision
     endpoints. Possible values include: 'westus', 'westeurope',
     'southeastasia', 'eastus2', 'westcentralus'
    :type azure_region1: str or
     ~azure.cognitiveservices.vision.contentmoderator.models.AzureRegion
    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    """

    def __init__(
            self, language, image_id, text_content, text_content1, term, language1, body, list_id1, content_type, image_url, image_stream, ocp_apim_subscription_key, azure_region1, credentials, cache_image=None, enhanced=None, list_id=None, autocorrect=None, pii=None, classify=None, label=None, tag=None):

        self.config = ContentModeratorAPIConfiguration(language, image_id, text_content, text_content1, term, language1, body, list_id1, content_type, image_url, image_stream, ocp_apim_subscription_key, azure_region1, credentials, cache_image, enhanced, list_id, autocorrect, pii, classify, label, tag)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1.0'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.images = ImagesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.text = TextOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.image_list = ImageListOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.terms_list = TermsListOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.termlist = TermlistOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.termlists = TermlistsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.reviews = ReviewsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.jobs = JobsOperations(
            self._client, self.config, self._serialize, self._deserialize)
