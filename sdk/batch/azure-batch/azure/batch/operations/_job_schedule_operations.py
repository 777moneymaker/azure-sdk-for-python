# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Iterable, Optional, TypeVar

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._vendor import _convert_request, _format_url_section
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_exists_request(
    job_schedule_id: str,
    *,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules/{jobScheduleId}")
    path_format_arguments = {
        "jobScheduleId": _SERIALIZER.url("job_schedule_id", job_schedule_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if if_match is not None:
        _headers['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_modified_since is not None:
        _headers['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_unmodified_since is not None:
        _headers['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="HEAD",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_delete_request(
    job_schedule_id: str,
    *,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules/{jobScheduleId}")
    path_format_arguments = {
        "jobScheduleId": _SERIALIZER.url("job_schedule_id", job_schedule_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if if_match is not None:
        _headers['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_modified_since is not None:
        _headers['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_unmodified_since is not None:
        _headers['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_get_request(
    job_schedule_id: str,
    *,
    select: Optional[str] = None,
    expand: Optional[str] = None,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules/{jobScheduleId}")
    path_format_arguments = {
        "jobScheduleId": _SERIALIZER.url("job_schedule_id", job_schedule_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if select is not None:
        _params['$select'] = _SERIALIZER.query("select", select, 'str')
    if expand is not None:
        _params['$expand'] = _SERIALIZER.query("expand", expand, 'str')
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if if_match is not None:
        _headers['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_modified_since is not None:
        _headers['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_unmodified_since is not None:
        _headers['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_patch_request(
    job_schedule_id: str,
    *,
    json: Optional[_models.JobSchedulePatchParameter] = None,
    content: Any = None,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules/{jobScheduleId}")
    path_format_arguments = {
        "jobScheduleId": _SERIALIZER.url("job_schedule_id", job_schedule_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if if_match is not None:
        _headers['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_modified_since is not None:
        _headers['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_unmodified_since is not None:
        _headers['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=_url,
        params=_params,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_update_request(
    job_schedule_id: str,
    *,
    json: Optional[_models.JobScheduleUpdateParameter] = None,
    content: Any = None,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules/{jobScheduleId}")
    path_format_arguments = {
        "jobScheduleId": _SERIALIZER.url("job_schedule_id", job_schedule_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if if_match is not None:
        _headers['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_modified_since is not None:
        _headers['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_unmodified_since is not None:
        _headers['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_disable_request(
    job_schedule_id: str,
    *,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules/{jobScheduleId}/disable")
    path_format_arguments = {
        "jobScheduleId": _SERIALIZER.url("job_schedule_id", job_schedule_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if if_match is not None:
        _headers['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_modified_since is not None:
        _headers['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_unmodified_since is not None:
        _headers['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_enable_request(
    job_schedule_id: str,
    *,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules/{jobScheduleId}/enable")
    path_format_arguments = {
        "jobScheduleId": _SERIALIZER.url("job_schedule_id", job_schedule_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if if_match is not None:
        _headers['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_modified_since is not None:
        _headers['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_unmodified_since is not None:
        _headers['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_terminate_request(
    job_schedule_id: str,
    *,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    if_match: Optional[str] = None,
    if_none_match: Optional[str] = None,
    if_modified_since: Optional[datetime.datetime] = None,
    if_unmodified_since: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules/{jobScheduleId}/terminate")
    path_format_arguments = {
        "jobScheduleId": _SERIALIZER.url("job_schedule_id", job_schedule_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if if_match is not None:
        _headers['If-Match'] = _SERIALIZER.header("if_match", if_match, 'str')
    if if_none_match is not None:
        _headers['If-None-Match'] = _SERIALIZER.header("if_none_match", if_none_match, 'str')
    if if_modified_since is not None:
        _headers['If-Modified-Since'] = _SERIALIZER.header("if_modified_since", if_modified_since, 'rfc-1123')
    if if_unmodified_since is not None:
        _headers['If-Unmodified-Since'] = _SERIALIZER.header("if_unmodified_since", if_unmodified_since, 'rfc-1123')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_add_request(
    *,
    json: Optional[_models.JobScheduleAddParameter] = None,
    content: Any = None,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules")

    # Construct parameters
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_params,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_list_request(
    *,
    filter: Optional[str] = None,
    select: Optional[str] = None,
    expand: Optional[str] = None,
    max_results: Optional[int] = 1000,
    timeout: Optional[int] = 30,
    client_request_id: Optional[str] = None,
    return_client_request_id: Optional[bool] = False,
    ocp_date: Optional[datetime.datetime] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/jobschedules")

    # Construct parameters
    if filter is not None:
        _params['$filter'] = _SERIALIZER.query("filter", filter, 'str')
    if select is not None:
        _params['$select'] = _SERIALIZER.query("select", select, 'str')
    if expand is not None:
        _params['$expand'] = _SERIALIZER.query("expand", expand, 'str')
    if max_results is not None:
        _params['maxresults'] = _SERIALIZER.query("max_results", max_results, 'int', maximum=1000, minimum=1)
    if timeout is not None:
        _params['timeout'] = _SERIALIZER.query("timeout", timeout, 'int')
    _params['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    if client_request_id is not None:
        _headers['client-request-id'] = _SERIALIZER.header("client_request_id", client_request_id, 'str')
    if return_client_request_id is not None:
        _headers['return-client-request-id'] = _SERIALIZER.header("return_client_request_id", return_client_request_id, 'bool')
    if ocp_date is not None:
        _headers['ocp-date'] = _SERIALIZER.header("ocp_date", ocp_date, 'rfc-1123')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )

class JobScheduleOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure-batch.BatchServiceClient`'s
        :attr:`job_schedule` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def exists(  # pylint: disable=inconsistent-return-statements
        self,
        job_schedule_id: str,
        job_schedule_exists_options: Optional[_models.JobScheduleExistsOptions] = None,
        **kwargs: Any
    ) -> None:
        """Checks the specified Job Schedule exists.

        Checks the specified Job Schedule exists.

        :param job_schedule_id: The ID of the Job Schedule which you want to check.
        :type job_schedule_id: str
        :param job_schedule_exists_options: Parameter group. Default value is None.
        :type job_schedule_exists_options: ~azure-batch.models.JobScheduleExistsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_exists_options is not None:
            _timeout = job_schedule_exists_options.timeout
            _client_request_id = job_schedule_exists_options.client_request_id
            _return_client_request_id = job_schedule_exists_options.return_client_request_id
            _ocp_date = job_schedule_exists_options.ocp_date
            _if_match = job_schedule_exists_options.if_match
            _if_none_match = job_schedule_exists_options.if_none_match
            _if_modified_since = job_schedule_exists_options.if_modified_since
            _if_unmodified_since = job_schedule_exists_options.if_unmodified_since

        request = build_exists_request(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            template_url=self.exists.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        if response.status_code == 200:
            response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
            response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
            response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
            response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
            

        if cls:
            return cls(pipeline_response, None, response_headers)

    exists.metadata = {'url': "/jobschedules/{jobScheduleId}"}  # type: ignore


    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self,
        job_schedule_id: str,
        job_schedule_delete_options: Optional[_models.JobScheduleDeleteOptions] = None,
        **kwargs: Any
    ) -> None:
        """Deletes a Job Schedule from the specified Account.

        When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When
        Tasks are deleted, all the files in their working directories on the Compute Nodes are also
        deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible
        once the Job Schedule is deleted, though they are still counted towards Account lifetime
        statistics.

        :param job_schedule_id: The ID of the Job Schedule to delete.
        :type job_schedule_id: str
        :param job_schedule_delete_options: Parameter group. Default value is None.
        :type job_schedule_delete_options: ~azure-batch.models.JobScheduleDeleteOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_delete_options is not None:
            _timeout = job_schedule_delete_options.timeout
            _client_request_id = job_schedule_delete_options.client_request_id
            _return_client_request_id = job_schedule_delete_options.return_client_request_id
            _ocp_date = job_schedule_delete_options.ocp_date
            _if_match = job_schedule_delete_options.if_match
            _if_none_match = job_schedule_delete_options.if_none_match
            _if_modified_since = job_schedule_delete_options.if_modified_since
            _if_unmodified_since = job_schedule_delete_options.if_unmodified_since

        request = build_delete_request(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            template_url=self.delete.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))


        if cls:
            return cls(pipeline_response, None, response_headers)

    delete.metadata = {'url': "/jobschedules/{jobScheduleId}"}  # type: ignore


    @distributed_trace
    def get(
        self,
        job_schedule_id: str,
        job_schedule_get_options: Optional[_models.JobScheduleGetOptions] = None,
        **kwargs: Any
    ) -> _models.CloudJobSchedule:
        """Gets information about the specified Job Schedule.

        :param job_schedule_id: The ID of the Job Schedule to get.
        :type job_schedule_id: str
        :param job_schedule_get_options: Parameter group. Default value is None.
        :type job_schedule_get_options: ~azure-batch.models.JobScheduleGetOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CloudJobSchedule, or the result of cls(response)
        :rtype: ~azure-batch.models.CloudJobSchedule
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.CloudJobSchedule]

        _select = None
        _expand = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_get_options is not None:
            _select = job_schedule_get_options.select
            _expand = job_schedule_get_options.expand
            _timeout = job_schedule_get_options.timeout
            _client_request_id = job_schedule_get_options.client_request_id
            _return_client_request_id = job_schedule_get_options.return_client_request_id
            _ocp_date = job_schedule_get_options.ocp_date
            _if_match = job_schedule_get_options.if_match
            _if_none_match = job_schedule_get_options.if_none_match
            _if_modified_since = job_schedule_get_options.if_modified_since
            _if_unmodified_since = job_schedule_get_options.if_unmodified_since

        request = build_get_request(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            select=_select,
            expand=_expand,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            template_url=self.get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))

        deserialized = self._deserialize('CloudJobSchedule', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    get.metadata = {'url': "/jobschedules/{jobScheduleId}"}  # type: ignore


    @distributed_trace
    def patch(  # pylint: disable=inconsistent-return-statements
        self,
        job_schedule_id: str,
        job_schedule_patch_parameter: _models.JobSchedulePatchParameter,
        job_schedule_patch_options: Optional[_models.JobSchedulePatchOptions] = None,
        **kwargs: Any
    ) -> None:
        """Updates the properties of the specified Job Schedule.

        This replaces only the Job Schedule properties specified in the request. For example, if the
        schedule property is not specified with this request, then the Batch service will keep the
        existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the
        update has taken place; currently running Jobs are unaffected.

        :param job_schedule_id: The ID of the Job Schedule to update.
        :type job_schedule_id: str
        :param job_schedule_patch_parameter: The parameters for the request.
        :type job_schedule_patch_parameter: ~azure-batch.models.JobSchedulePatchParameter
        :param job_schedule_patch_options: Parameter group. Default value is None.
        :type job_schedule_patch_options: ~azure-batch.models.JobSchedulePatchOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json; odata=minimalmetadata"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_patch_options is not None:
            _timeout = job_schedule_patch_options.timeout
            _client_request_id = job_schedule_patch_options.client_request_id
            _return_client_request_id = job_schedule_patch_options.return_client_request_id
            _ocp_date = job_schedule_patch_options.ocp_date
            _if_match = job_schedule_patch_options.if_match
            _if_none_match = job_schedule_patch_options.if_none_match
            _if_modified_since = job_schedule_patch_options.if_modified_since
            _if_unmodified_since = job_schedule_patch_options.if_unmodified_since
        _content = self._serialize.body(job_schedule_patch_parameter, 'JobSchedulePatchParameter')

        request = build_patch_request(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            content_type=content_type,
            content=_content,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            template_url=self.patch.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))


        if cls:
            return cls(pipeline_response, None, response_headers)

    patch.metadata = {'url': "/jobschedules/{jobScheduleId}"}  # type: ignore


    @distributed_trace
    def update(  # pylint: disable=inconsistent-return-statements
        self,
        job_schedule_id: str,
        job_schedule_update_parameter: _models.JobScheduleUpdateParameter,
        job_schedule_update_options: Optional[_models.JobScheduleUpdateOptions] = None,
        **kwargs: Any
    ) -> None:
        """Updates the properties of the specified Job Schedule.

        This fully replaces all the updatable properties of the Job Schedule. For example, if the
        schedule property is not specified with this request, then the Batch service will remove the
        existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the
        update has taken place; currently running Jobs are unaffected.

        :param job_schedule_id: The ID of the Job Schedule to update.
        :type job_schedule_id: str
        :param job_schedule_update_parameter: The parameters for the request.
        :type job_schedule_update_parameter: ~azure-batch.models.JobScheduleUpdateParameter
        :param job_schedule_update_options: Parameter group. Default value is None.
        :type job_schedule_update_options: ~azure-batch.models.JobScheduleUpdateOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json; odata=minimalmetadata"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_update_options is not None:
            _timeout = job_schedule_update_options.timeout
            _client_request_id = job_schedule_update_options.client_request_id
            _return_client_request_id = job_schedule_update_options.return_client_request_id
            _ocp_date = job_schedule_update_options.ocp_date
            _if_match = job_schedule_update_options.if_match
            _if_none_match = job_schedule_update_options.if_none_match
            _if_modified_since = job_schedule_update_options.if_modified_since
            _if_unmodified_since = job_schedule_update_options.if_unmodified_since
        _content = self._serialize.body(job_schedule_update_parameter, 'JobScheduleUpdateParameter')

        request = build_update_request(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            content_type=content_type,
            content=_content,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            template_url=self.update.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))


        if cls:
            return cls(pipeline_response, None, response_headers)

    update.metadata = {'url': "/jobschedules/{jobScheduleId}"}  # type: ignore


    @distributed_trace
    def disable(  # pylint: disable=inconsistent-return-statements
        self,
        job_schedule_id: str,
        job_schedule_disable_options: Optional[_models.JobScheduleDisableOptions] = None,
        **kwargs: Any
    ) -> None:
        """Disables a Job Schedule.

        No new Jobs will be created until the Job Schedule is enabled again.

        :param job_schedule_id: The ID of the Job Schedule to disable.
        :type job_schedule_id: str
        :param job_schedule_disable_options: Parameter group. Default value is None.
        :type job_schedule_disable_options: ~azure-batch.models.JobScheduleDisableOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_disable_options is not None:
            _timeout = job_schedule_disable_options.timeout
            _client_request_id = job_schedule_disable_options.client_request_id
            _return_client_request_id = job_schedule_disable_options.return_client_request_id
            _ocp_date = job_schedule_disable_options.ocp_date
            _if_match = job_schedule_disable_options.if_match
            _if_none_match = job_schedule_disable_options.if_none_match
            _if_modified_since = job_schedule_disable_options.if_modified_since
            _if_unmodified_since = job_schedule_disable_options.if_unmodified_since

        request = build_disable_request(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            template_url=self.disable.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))


        if cls:
            return cls(pipeline_response, None, response_headers)

    disable.metadata = {'url': "/jobschedules/{jobScheduleId}/disable"}  # type: ignore


    @distributed_trace
    def enable(  # pylint: disable=inconsistent-return-statements
        self,
        job_schedule_id: str,
        job_schedule_enable_options: Optional[_models.JobScheduleEnableOptions] = None,
        **kwargs: Any
    ) -> None:
        """Enables a Job Schedule.

        Enables a Job Schedule.

        :param job_schedule_id: The ID of the Job Schedule to enable.
        :type job_schedule_id: str
        :param job_schedule_enable_options: Parameter group. Default value is None.
        :type job_schedule_enable_options: ~azure-batch.models.JobScheduleEnableOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_enable_options is not None:
            _timeout = job_schedule_enable_options.timeout
            _client_request_id = job_schedule_enable_options.client_request_id
            _return_client_request_id = job_schedule_enable_options.return_client_request_id
            _ocp_date = job_schedule_enable_options.ocp_date
            _if_match = job_schedule_enable_options.if_match
            _if_none_match = job_schedule_enable_options.if_none_match
            _if_modified_since = job_schedule_enable_options.if_modified_since
            _if_unmodified_since = job_schedule_enable_options.if_unmodified_since

        request = build_enable_request(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            template_url=self.enable.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))


        if cls:
            return cls(pipeline_response, None, response_headers)

    enable.metadata = {'url': "/jobschedules/{jobScheduleId}/enable"}  # type: ignore


    @distributed_trace
    def terminate(  # pylint: disable=inconsistent-return-statements
        self,
        job_schedule_id: str,
        job_schedule_terminate_options: Optional[_models.JobScheduleTerminateOptions] = None,
        **kwargs: Any
    ) -> None:
        """Terminates a Job Schedule.

        Terminates a Job Schedule.

        :param job_schedule_id: The ID of the Job Schedule to terminates.
        :type job_schedule_id: str
        :param job_schedule_terminate_options: Parameter group. Default value is None.
        :type job_schedule_terminate_options: ~azure-batch.models.JobScheduleTerminateOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_schedule_terminate_options is not None:
            _timeout = job_schedule_terminate_options.timeout
            _client_request_id = job_schedule_terminate_options.client_request_id
            _return_client_request_id = job_schedule_terminate_options.return_client_request_id
            _ocp_date = job_schedule_terminate_options.ocp_date
            _if_match = job_schedule_terminate_options.if_match
            _if_none_match = job_schedule_terminate_options.if_none_match
            _if_modified_since = job_schedule_terminate_options.if_modified_since
            _if_unmodified_since = job_schedule_terminate_options.if_unmodified_since

        request = build_terminate_request(
            job_schedule_id=job_schedule_id,
            api_version=api_version,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            template_url=self.terminate.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))


        if cls:
            return cls(pipeline_response, None, response_headers)

    terminate.metadata = {'url': "/jobschedules/{jobScheduleId}/terminate"}  # type: ignore


    @distributed_trace
    def add(  # pylint: disable=inconsistent-return-statements
        self,
        cloud_job_schedule: _models.JobScheduleAddParameter,
        job_schedule_add_options: Optional[_models.JobScheduleAddOptions] = None,
        **kwargs: Any
    ) -> None:
        """Adds a Job Schedule to the specified Account.

        Adds a Job Schedule to the specified Account.

        :param cloud_job_schedule: The Job Schedule to be added.
        :type cloud_job_schedule: ~azure-batch.models.JobScheduleAddParameter
        :param job_schedule_add_options: Parameter group. Default value is None.
        :type job_schedule_add_options: ~azure-batch.models.JobScheduleAddOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json; odata=minimalmetadata"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if job_schedule_add_options is not None:
            _timeout = job_schedule_add_options.timeout
            _client_request_id = job_schedule_add_options.client_request_id
            _return_client_request_id = job_schedule_add_options.return_client_request_id
            _ocp_date = job_schedule_add_options.ocp_date
        _content = self._serialize.body(cloud_job_schedule, 'JobScheduleAddParameter')

        request = build_add_request(
            api_version=api_version,
            content_type=content_type,
            content=_content,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            template_url=self.add.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        response_headers['DataServiceId']=self._deserialize('str', response.headers.get('DataServiceId'))


        if cls:
            return cls(pipeline_response, None, response_headers)

    add.metadata = {'url': "/jobschedules"}  # type: ignore


    @distributed_trace
    def list(
        self,
        job_schedule_list_options: Optional[_models.JobScheduleListOptions] = None,
        **kwargs: Any
    ) -> Iterable[_models.CloudJobScheduleListResult]:
        """Lists all of the Job Schedules in the specified Account.

        Lists all of the Job Schedules in the specified Account.

        :param job_schedule_list_options: Parameter group. Default value is None.
        :type job_schedule_list_options: ~azure-batch.models.JobScheduleListOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CloudJobScheduleListResult or the result of
         cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure-batch.models.CloudJobScheduleListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop('api_version', _params.pop('api-version', "2022-01-01.15.0"))  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[_models.CloudJobScheduleListResult]

        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:
                _filter = None
                _select = None
                _expand = None
                _max_results = None
                _timeout = None
                _client_request_id = None
                _return_client_request_id = None
                _ocp_date = None
                if job_schedule_list_options is not None:
                    _filter = job_schedule_list_options.filter
                    _select = job_schedule_list_options.select
                    _expand = job_schedule_list_options.expand
                    _max_results = job_schedule_list_options.max_results
                    _timeout = job_schedule_list_options.timeout
                    _client_request_id = job_schedule_list_options.client_request_id
                    _return_client_request_id = job_schedule_list_options.return_client_request_id
                    _ocp_date = job_schedule_list_options.ocp_date
                
                request = build_list_request(
                    api_version=api_version,
                    filter=_filter,
                    select=_select,
                    expand=_expand,
                    max_results=_max_results,
                    timeout=_timeout,
                    client_request_id=_client_request_id,
                    return_client_request_id=_return_client_request_id,
                    ocp_date=_ocp_date,
                    template_url=self.list.metadata['url'],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                _filter = None
                _select = None
                _expand = None
                _max_results = None
                _timeout = None
                _client_request_id = None
                _return_client_request_id = None
                _ocp_date = None
                if job_schedule_list_options is not None:
                    _filter = job_schedule_list_options.filter
                    _select = job_schedule_list_options.select
                    _expand = job_schedule_list_options.expand
                    _max_results = job_schedule_list_options.max_results
                    _timeout = job_schedule_list_options.timeout
                    _client_request_id = job_schedule_list_options.client_request_id
                    _return_client_request_id = job_schedule_list_options.return_client_request_id
                    _ocp_date = job_schedule_list_options.ocp_date
                
                request = build_list_request(
                    api_version=api_version,
                    filter=_filter,
                    select=_select,
                    expand=_expand,
                    max_results=_max_results,
                    timeout=_timeout,
                    client_request_id=_client_request_id,
                    return_client_request_id=_return_client_request_id,
                    ocp_date=_ocp_date,
                    template_url=next_link,
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

                path_format_arguments = {
                    "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("CloudJobScheduleListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': "/jobschedules"}  # type: ignore
