# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Optional, TypeVar
from urllib.parse import parse_qs, urljoin, urlparse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._job_operations import (
    build_add_request,
    build_delete_request,
    build_disable_request,
    build_enable_request,
    build_get_all_lifetime_statistics_request,
    build_get_request,
    build_get_task_counts_request,
    build_list_from_job_schedule_request,
    build_list_preparation_and_release_task_status_request,
    build_list_request,
    build_patch_request,
    build_terminate_request,
    build_update_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class JobOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure-batch.aio.BatchServiceClient`'s
        :attr:`job` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_all_lifetime_statistics(
        self,
        job_get_all_lifetime_statistics_options: Optional[_models.JobGetAllLifetimeStatisticsOptions] = None,
        **kwargs: Any
    ) -> _models.JobStatistics:
        """Gets lifetime summary statistics for all of the Jobs in the specified Account.

        Statistics are aggregated across all Jobs that have ever existed in the Account, from Account
        creation to the last update time of the statistics. The statistics may not be immediately
        available. The Batch service performs periodic roll-up of statistics. The typical delay is
        about 30 minutes.

        :param job_get_all_lifetime_statistics_options: Parameter group. Default value is None.
        :type job_get_all_lifetime_statistics_options:
         ~azure-batch.models.JobGetAllLifetimeStatisticsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JobStatistics or the result of cls(response)
        :rtype: ~azure-batch.models.JobStatistics
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.JobStatistics]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if job_get_all_lifetime_statistics_options is not None:
            _client_request_id = job_get_all_lifetime_statistics_options.client_request_id
            _ocp_date = job_get_all_lifetime_statistics_options.ocp_date
            _return_client_request_id = job_get_all_lifetime_statistics_options.return_client_request_id
            _timeout = job_get_all_lifetime_statistics_options.timeout

        request = build_get_all_lifetime_statistics_request(
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            api_version=api_version,
            template_url=self.get_all_lifetime_statistics.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["Last-Modified"] = self._deserialize("rfc-1123", response.headers.get("Last-Modified"))

        deserialized = self._deserialize("JobStatistics", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    get_all_lifetime_statistics.metadata = {"url": "/lifetimejobstats"}  # type: ignore

    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self, job_id: str, job_delete_options: Optional[_models.JobDeleteOptions] = None, **kwargs: Any
    ) -> None:
        """Deletes a Job.

        Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This
        also overrides the retention period for Task data; that is, if the Job contains Tasks which are
        still retained on Compute Nodes, the Batch services deletes those Tasks' working directories
        and all their contents.  When a Delete Job request is received, the Batch service sets the Job
        to the deleting state. All update operations on a Job that is in deleting state will fail with
        status code 409 (Conflict), with additional information indicating that the Job is being
        deleted.

        :param job_id: The ID of the Job to delete. Required.
        :type job_id: str
        :param job_delete_options: Parameter group. Default value is None.
        :type job_delete_options: ~azure-batch.models.JobDeleteOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_delete_options is not None:
            _client_request_id = job_delete_options.client_request_id
            _if_match = job_delete_options.if_match
            _if_modified_since = job_delete_options.if_modified_since
            _if_none_match = job_delete_options.if_none_match
            _if_unmodified_since = job_delete_options.if_unmodified_since
            _ocp_date = job_delete_options.ocp_date
            _return_client_request_id = job_delete_options.return_client_request_id
            _timeout = job_delete_options.timeout

        request = build_delete_request(
            job_id=job_id,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            api_version=api_version,
            template_url=self.delete.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    delete.metadata = {"url": "/jobs/{jobId}"}  # type: ignore

    @distributed_trace_async
    async def get(
        self, job_id: str, job_get_options: Optional[_models.JobGetOptions] = None, **kwargs: Any
    ) -> _models.BatchJob:
        """Gets information about the specified Job.

        Gets information about the specified Job.

        :param job_id: The ID of the Job. Required.
        :type job_id: str
        :param job_get_options: Parameter group. Default value is None.
        :type job_get_options: ~azure-batch.models.JobGetOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchJob or the result of cls(response)
        :rtype: ~azure-batch.models.BatchJob
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.BatchJob]

        _select = None
        _expand = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_get_options is not None:
            _client_request_id = job_get_options.client_request_id
            _expand = job_get_options.expand
            _if_match = job_get_options.if_match
            _if_modified_since = job_get_options.if_modified_since
            _if_none_match = job_get_options.if_none_match
            _if_unmodified_since = job_get_options.if_unmodified_since
            _ocp_date = job_get_options.ocp_date
            _return_client_request_id = job_get_options.return_client_request_id
            _select = job_get_options.select
            _timeout = job_get_options.timeout

        request = build_get_request(
            job_id=job_id,
            select=_select,
            expand=_expand,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            api_version=api_version,
            template_url=self.get.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["Last-Modified"] = self._deserialize("rfc-1123", response.headers.get("Last-Modified"))

        deserialized = self._deserialize("BatchJob", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    get.metadata = {"url": "/jobs/{jobId}"}  # type: ignore

    @distributed_trace_async
    async def patch(  # pylint: disable=inconsistent-return-statements
        self,
        job_id: str,
        job_update: _models.BatchJobUpdate,
        job_patch_options: Optional[_models.JobPatchOptions] = None,
        **kwargs: Any
    ) -> None:
        """Updates the properties of the specified Job.

        This replaces only the Job properties specified in the request. For example, if the Job has
        constraints, and a request does not specify the constraints element, then the Job keeps the
        existing constraints.

        :param job_id: The ID of the Job whose properties you want to update. Required.
        :type job_id: str
        :param job_update: The parameters for the request. Required.
        :type job_update: ~azure-batch.models.BatchJobUpdate
        :param job_patch_options: Parameter group. Default value is None.
        :type job_patch_options: ~azure-batch.models.JobPatchOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", "application/json; odata=minimalmetadata")
        )  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_patch_options is not None:
            _client_request_id = job_patch_options.client_request_id
            _if_match = job_patch_options.if_match
            _if_modified_since = job_patch_options.if_modified_since
            _if_none_match = job_patch_options.if_none_match
            _if_unmodified_since = job_patch_options.if_unmodified_since
            _ocp_date = job_patch_options.ocp_date
            _return_client_request_id = job_patch_options.return_client_request_id
            _timeout = job_patch_options.timeout
        _json = self._serialize.body(job_update, "BatchJobUpdate")

        request = build_patch_request(
            job_id=job_id,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.patch.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["Last-Modified"] = self._deserialize("rfc-1123", response.headers.get("Last-Modified"))
        response_headers["DataServiceId"] = self._deserialize("str", response.headers.get("DataServiceId"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    patch.metadata = {"url": "/jobs/{jobId}"}  # type: ignore

    @distributed_trace_async
    async def update(  # pylint: disable=inconsistent-return-statements
        self,
        job_id: str,
        job: _models.BatchJob,
        job_update_options: Optional[_models.JobUpdateOptions] = None,
        **kwargs: Any
    ) -> None:
        """Updates the properties of the specified Job.

        This fully replaces all the updatable properties of the Job. For example, if the Job has
        constraints associated with it and if constraints is not specified with this request, then the
        Batch service will remove the existing constraints.

        :param job_id: The ID of the Job whose properties you want to update. Required.
        :type job_id: str
        :param job: The parameters for the request. Required.
        :type job: ~azure-batch.models.BatchJob
        :param job_update_options: Parameter group. Default value is None.
        :type job_update_options: ~azure-batch.models.JobUpdateOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", "application/json; odata=minimalmetadata")
        )  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_update_options is not None:
            _client_request_id = job_update_options.client_request_id
            _if_match = job_update_options.if_match
            _if_modified_since = job_update_options.if_modified_since
            _if_none_match = job_update_options.if_none_match
            _if_unmodified_since = job_update_options.if_unmodified_since
            _ocp_date = job_update_options.ocp_date
            _return_client_request_id = job_update_options.return_client_request_id
            _timeout = job_update_options.timeout
        _json = self._serialize.body(job, "BatchJob")

        request = build_update_request(
            job_id=job_id,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.update.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["Last-Modified"] = self._deserialize("rfc-1123", response.headers.get("Last-Modified"))
        response_headers["DataServiceId"] = self._deserialize("str", response.headers.get("DataServiceId"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    update.metadata = {"url": "/jobs/{jobId}"}  # type: ignore

    @distributed_trace_async
    async def disable(  # pylint: disable=inconsistent-return-statements
        self,
        job_id: str,
        parameters: _models.BatchJobDisableParameters,
        job_disable_options: Optional[_models.JobDisableOptions] = None,
        **kwargs: Any
    ) -> None:
        """Disables the specified Job, preventing new Tasks from running.

        The Batch Service immediately moves the Job to the disabling state. Batch then uses the
        disableTasks parameter to determine what to do with the currently running Tasks of the Job. The
        Job remains in the disabling state until the disable operation is completed and all Tasks have
        been dealt with according to the disableTasks option; the Job then moves to the disabled state.
        No new Tasks are started under the Job until it moves back to active state. If you try to
        disable a Job that is in any state other than active, disabling, or disabled, the request fails
        with status code 409.

        :param job_id: The ID of the Job to disable. Required.
        :type job_id: str
        :param parameters: The parameters for the request. Required.
        :type parameters: ~azure-batch.models.BatchJobDisableParameters
        :param job_disable_options: Parameter group. Default value is None.
        :type job_disable_options: ~azure-batch.models.JobDisableOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", "application/json; odata=minimalmetadata")
        )  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_disable_options is not None:
            _client_request_id = job_disable_options.client_request_id
            _if_match = job_disable_options.if_match
            _if_modified_since = job_disable_options.if_modified_since
            _if_none_match = job_disable_options.if_none_match
            _if_unmodified_since = job_disable_options.if_unmodified_since
            _ocp_date = job_disable_options.ocp_date
            _return_client_request_id = job_disable_options.return_client_request_id
            _timeout = job_disable_options.timeout
        _json = self._serialize.body(parameters, "BatchJobDisableParameters")

        request = build_disable_request(
            job_id=job_id,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.disable.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["Last-Modified"] = self._deserialize("rfc-1123", response.headers.get("Last-Modified"))
        response_headers["DataServiceId"] = self._deserialize("str", response.headers.get("DataServiceId"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    disable.metadata = {"url": "/jobs/{jobId}/disable"}  # type: ignore

    @distributed_trace_async
    async def enable(  # pylint: disable=inconsistent-return-statements
        self, job_id: str, job_enable_options: Optional[_models.JobEnableOptions] = None, **kwargs: Any
    ) -> None:
        """Enables the specified Job, allowing new Tasks to run.

        When you call this API, the Batch service sets a disabled Job to the enabling state. After the
        this operation is completed, the Job moves to the active state, and scheduling of new Tasks
        under the Job resumes. The Batch service does not allow a Task to remain in the active state
        for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added
        more than 180 days ago, those Tasks will not run.

        :param job_id: The ID of the Job to enable. Required.
        :type job_id: str
        :param job_enable_options: Parameter group. Default value is None.
        :type job_enable_options: ~azure-batch.models.JobEnableOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_enable_options is not None:
            _client_request_id = job_enable_options.client_request_id
            _if_match = job_enable_options.if_match
            _if_modified_since = job_enable_options.if_modified_since
            _if_none_match = job_enable_options.if_none_match
            _if_unmodified_since = job_enable_options.if_unmodified_since
            _ocp_date = job_enable_options.ocp_date
            _return_client_request_id = job_enable_options.return_client_request_id
            _timeout = job_enable_options.timeout

        request = build_enable_request(
            job_id=job_id,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            api_version=api_version,
            template_url=self.enable.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["Last-Modified"] = self._deserialize("rfc-1123", response.headers.get("Last-Modified"))
        response_headers["DataServiceId"] = self._deserialize("str", response.headers.get("DataServiceId"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    enable.metadata = {"url": "/jobs/{jobId}/enable"}  # type: ignore

    @distributed_trace_async
    async def terminate(  # pylint: disable=inconsistent-return-statements
        self,
        job_id: str,
        job_terminate_options: Optional[_models.JobTerminateOptions] = None,
        parameters: Optional[_models.BatchJobTerminateParameters] = None,
        **kwargs: Any
    ) -> None:
        """Terminates the specified Job, marking it as completed.

        When a Terminate Job request is received, the Batch service sets the Job to the terminating
        state. The Batch service then terminates any running Tasks associated with the Job and runs any
        required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks
        in the Job in the active state, they will remain in the active state. Once a Job is terminated,
        new Tasks cannot be added and any remaining active Tasks will not be scheduled.

        :param job_id: The ID of the Job to terminate. Required.
        :type job_id: str
        :param job_terminate_options: Parameter group. Default value is None.
        :type job_terminate_options: ~azure-batch.models.JobTerminateOptions
        :param parameters: The parameters for the request. Default value is None.
        :type parameters: ~azure-batch.models.BatchJobTerminateParameters
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", "application/json; odata=minimalmetadata")
        )  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        _if_match = None
        _if_none_match = None
        _if_modified_since = None
        _if_unmodified_since = None
        if job_terminate_options is not None:
            _client_request_id = job_terminate_options.client_request_id
            _if_match = job_terminate_options.if_match
            _if_modified_since = job_terminate_options.if_modified_since
            _if_none_match = job_terminate_options.if_none_match
            _if_unmodified_since = job_terminate_options.if_unmodified_since
            _ocp_date = job_terminate_options.ocp_date
            _return_client_request_id = job_terminate_options.return_client_request_id
            _timeout = job_terminate_options.timeout
        if parameters is not None:
            _json = self._serialize.body(parameters, "BatchJobTerminateParameters")
        else:
            _json = None

        request = build_terminate_request(
            job_id=job_id,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            if_match=_if_match,
            if_none_match=_if_none_match,
            if_modified_since=_if_modified_since,
            if_unmodified_since=_if_unmodified_since,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.terminate.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["Last-Modified"] = self._deserialize("rfc-1123", response.headers.get("Last-Modified"))
        response_headers["DataServiceId"] = self._deserialize("str", response.headers.get("DataServiceId"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    terminate.metadata = {"url": "/jobs/{jobId}/terminate"}  # type: ignore

    @distributed_trace_async
    async def add(  # pylint: disable=inconsistent-return-statements
        self, job: _models.BatchJob, job_add_options: Optional[_models.JobAddOptions] = None, **kwargs: Any
    ) -> None:
        """Adds a Job to the specified Account.

        The Batch service supports two ways to control the work done as part of a Job. In the first
        approach, the user specifies a Job Manager Task. The Batch service launches this Task when it
        is ready to start the Job. The Job Manager Task controls all other Tasks that run under this
        Job, by using the Task APIs. In the second approach, the user directly controls the execution
        of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid
        including sensitive information such as user names or secret project names. This information
        may appear in telemetry logs accessible to Microsoft Support engineers.

        :param job: The Job to be added. Required.
        :type job: ~azure-batch.models.BatchJob
        :param job_add_options: Parameter group. Default value is None.
        :type job_add_options: ~azure-batch.models.JobAddOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", "application/json; odata=minimalmetadata")
        )  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if job_add_options is not None:
            _client_request_id = job_add_options.client_request_id
            _ocp_date = job_add_options.ocp_date
            _return_client_request_id = job_add_options.return_client_request_id
            _timeout = job_add_options.timeout
        _json = self._serialize.body(job, "BatchJob")

        request = build_add_request(
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.add.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["Last-Modified"] = self._deserialize("rfc-1123", response.headers.get("Last-Modified"))
        response_headers["DataServiceId"] = self._deserialize("str", response.headers.get("DataServiceId"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    add.metadata = {"url": "/jobs"}  # type: ignore

    @distributed_trace
    def list(
        self, job_list_options: Optional[_models.JobListOptions] = None, **kwargs: Any
    ) -> AsyncIterable["_models.BatchJob"]:
        """Lists all of the Jobs in the specified Account.

        Lists all of the Jobs in the specified Account.

        :param job_list_options: Parameter group. Default value is None.
        :type job_list_options: ~azure-batch.models.JobListOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either BatchJob or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure-batch.models.BatchJob]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.BatchJobListResult]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:
                _filter = None
                _select = None
                _expand = None
                _max_results = None
                _timeout = None
                _client_request_id = None
                _return_client_request_id = None
                _ocp_date = None
                if job_list_options is not None:
                    _client_request_id = job_list_options.client_request_id
                    _expand = job_list_options.expand
                    _filter = job_list_options.filter
                    _max_results = job_list_options.max_results
                    _ocp_date = job_list_options.ocp_date
                    _return_client_request_id = job_list_options.return_client_request_id
                    _select = job_list_options.select
                    _timeout = job_list_options.timeout

                request = build_list_request(
                    filter=_filter,
                    select=_select,
                    expand=_expand,
                    max_results=_max_results,
                    timeout=_timeout,
                    client_request_id=_client_request_id,
                    return_client_request_id=_return_client_request_id,
                    ocp_date=_ocp_date,
                    api_version=api_version,
                    template_url=self.list.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "batchUrl": self._serialize.url(
                        "self._config.batch_url", self._config.batch_url, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request = _convert_request(request)
                path_format_arguments = {
                    "batchUrl": self._serialize.url(
                        "self._config.batch_url", self._config.batch_url, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("BatchJobListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list.metadata = {"url": "/jobs"}  # type: ignore

    @distributed_trace
    def list_from_job_schedule(
        self,
        job_schedule_id: str,
        job_list_from_job_schedule_options: Optional[_models.JobListFromJobScheduleOptions] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.BatchJob"]:
        """Lists the Jobs that have been created under the specified Job Schedule.

        Lists the Jobs that have been created under the specified Job Schedule.

        :param job_schedule_id: The ID of the Job Schedule from which you want to get a list of Jobs.
         Required.
        :type job_schedule_id: str
        :param job_list_from_job_schedule_options: Parameter group. Default value is None.
        :type job_list_from_job_schedule_options: ~azure-batch.models.JobListFromJobScheduleOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either BatchJob or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure-batch.models.BatchJob]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.BatchJobListResult]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:
                _filter = None
                _select = None
                _expand = None
                _max_results = None
                _timeout = None
                _client_request_id = None
                _return_client_request_id = None
                _ocp_date = None
                if job_list_from_job_schedule_options is not None:
                    _client_request_id = job_list_from_job_schedule_options.client_request_id
                    _expand = job_list_from_job_schedule_options.expand
                    _filter = job_list_from_job_schedule_options.filter
                    _max_results = job_list_from_job_schedule_options.max_results
                    _ocp_date = job_list_from_job_schedule_options.ocp_date
                    _return_client_request_id = job_list_from_job_schedule_options.return_client_request_id
                    _select = job_list_from_job_schedule_options.select
                    _timeout = job_list_from_job_schedule_options.timeout

                request = build_list_from_job_schedule_request(
                    job_schedule_id=job_schedule_id,
                    filter=_filter,
                    select=_select,
                    expand=_expand,
                    max_results=_max_results,
                    timeout=_timeout,
                    client_request_id=_client_request_id,
                    return_client_request_id=_return_client_request_id,
                    ocp_date=_ocp_date,
                    api_version=api_version,
                    template_url=self.list_from_job_schedule.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "batchUrl": self._serialize.url(
                        "self._config.batch_url", self._config.batch_url, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request = _convert_request(request)
                path_format_arguments = {
                    "batchUrl": self._serialize.url(
                        "self._config.batch_url", self._config.batch_url, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("BatchJobListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list_from_job_schedule.metadata = {"url": "/jobschedules/{jobScheduleId}/jobs"}  # type: ignore

    @distributed_trace
    def list_preparation_and_release_task_status(
        self,
        job_id: str,
        job_list_preparation_and_release_task_status_options: Optional[
            _models.JobListPreparationAndReleaseTaskStatusOptions
        ] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.JobPreparationAndReleaseTaskExecutionInformation"]:
        """Lists the execution status of the Job Preparation and Job Release Task for the specified Job
        across the Compute Nodes where the Job has run.

        This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have
        run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been
        removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job
        Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of
        JobPreparationTaskNotSpecified.

        :param job_id: The ID of the Job. Required.
        :type job_id: str
        :param job_list_preparation_and_release_task_status_options: Parameter group. Default value is
         None.
        :type job_list_preparation_and_release_task_status_options:
         ~azure-batch.models.JobListPreparationAndReleaseTaskStatusOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either JobPreparationAndReleaseTaskExecutionInformation
         or the result of cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure-batch.models.JobPreparationAndReleaseTaskExecutionInformation]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.BatchJobListPreparationAndReleaseTaskStatusResult]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:
                _filter = None
                _select = None
                _max_results = None
                _timeout = None
                _client_request_id = None
                _return_client_request_id = None
                _ocp_date = None
                if job_list_preparation_and_release_task_status_options is not None:
                    _client_request_id = job_list_preparation_and_release_task_status_options.client_request_id
                    _filter = job_list_preparation_and_release_task_status_options.filter
                    _max_results = job_list_preparation_and_release_task_status_options.max_results
                    _ocp_date = job_list_preparation_and_release_task_status_options.ocp_date
                    _return_client_request_id = (
                        job_list_preparation_and_release_task_status_options.return_client_request_id
                    )
                    _select = job_list_preparation_and_release_task_status_options.select
                    _timeout = job_list_preparation_and_release_task_status_options.timeout

                request = build_list_preparation_and_release_task_status_request(
                    job_id=job_id,
                    filter=_filter,
                    select=_select,
                    max_results=_max_results,
                    timeout=_timeout,
                    client_request_id=_client_request_id,
                    return_client_request_id=_return_client_request_id,
                    ocp_date=_ocp_date,
                    api_version=api_version,
                    template_url=self.list_preparation_and_release_task_status.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "batchUrl": self._serialize.url(
                        "self._config.batch_url", self._config.batch_url, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urlparse(next_link)
                _next_request_params = case_insensitive_dict(parse_qs(_parsed_next_link.query))
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest("GET", urljoin(next_link, _parsed_next_link.path), params=_next_request_params)
                request = _convert_request(request)
                path_format_arguments = {
                    "batchUrl": self._serialize.url(
                        "self._config.batch_url", self._config.batch_url, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("BatchJobListPreparationAndReleaseTaskStatusResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list_preparation_and_release_task_status.metadata = {"url": "/jobs/{jobId}/jobpreparationandreleasetaskstatus"}  # type: ignore

    @distributed_trace_async
    async def get_task_counts(
        self, job_id: str, job_get_task_counts_options: Optional[_models.JobGetTaskCountsOptions] = None, **kwargs: Any
    ) -> _models.TaskCountsResult:
        """Gets the Task counts for the specified Job.

        Task counts provide a count of the Tasks by active, running or completed Task state, and a
        count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running.
        Note that the numbers returned may not always be up to date. If you need exact task counts, use
        a list query.

        :param job_id: The ID of the Job. Required.
        :type job_id: str
        :param job_get_task_counts_options: Parameter group. Default value is None.
        :type job_get_task_counts_options: ~azure-batch.models.JobGetTaskCountsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TaskCountsResult or the result of cls(response)
        :rtype: ~azure-batch.models.TaskCountsResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.TaskCountsResult]

        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if job_get_task_counts_options is not None:
            _client_request_id = job_get_task_counts_options.client_request_id
            _ocp_date = job_get_task_counts_options.ocp_date
            _return_client_request_id = job_get_task_counts_options.return_client_request_id
            _timeout = job_get_task_counts_options.timeout

        request = build_get_task_counts_request(
            job_id=job_id,
            timeout=_timeout,
            client_request_id=_client_request_id,
            return_client_request_id=_return_client_request_id,
            ocp_date=_ocp_date,
            api_version=api_version,
            template_url=self.get_task_counts.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "batchUrl": self._serialize.url("self._config.batch_url", self._config.batch_url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.BatchError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["client-request-id"] = self._deserialize("str", response.headers.get("client-request-id"))
        response_headers["request-id"] = self._deserialize("str", response.headers.get("request-id"))

        deserialized = self._deserialize("TaskCountsResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    get_task_counts.metadata = {"url": "/jobs/{jobId}/taskcounts"}  # type: ignore
