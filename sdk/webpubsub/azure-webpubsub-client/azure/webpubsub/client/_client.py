# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from copy import deepcopy
from typing import Any, TYPE_CHECKING, overload, Callable, Union, Optional, Dict

from azure.core import PipelineClient
from azure.core.rest import HttpRequest, HttpResponse

from ._configuration import WebPubSubClientConfiguration
from ._serialization import Deserializer, Serializer
from .operations import HealthApiOperations, WebPubSubOperations
from .models import WebPubSubClientState, WebPubSubClientOptions, WebPubSubRetryOptions

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials import TokenCredential


class WebPubSubClientCredential:

    _client_access_url_provider: Callable[[Any], str] = None

    @overload
    def __init__(self, client_access_url_provider: str) -> None:
        ...

    @overload
    def __init__(self, client_access_url_provider: Callable[[Any], str]) -> None:
        ...

    @overload
    def __init__(
        self, client_access_url_provider: Union[str, Callable[[Any], str]]
    ) -> None:
        if isinstance(client_access_url_provider, str):
            self._client_access_url_provider = lambda _: client_access_url_provider
        else:
            self._client_access_url_provider = client_access_url_provider

    def get_client_access_url(self) -> str:
        return self._client_access_url_provider()


class RetryPolicy:
    pass


class WebPubSubGroup:
    def __init__(self, name: str) -> None:
        self.name = name
        self.is_joined = False


class AckEntity:
    pass


class SequenceId:
    pass


class WebPubSubClient:  # pylint: disable=client-accepts-api-version-keyword
    """WebPubSubClient.

    :ivar health_api: HealthApiOperations operations
    :vartype health_api: azure.webpubsub.client.operations.HealthApiOperations
    :ivar web_pub_sub: WebPubSubOperations operations
    :vartype web_pub_sub: azure.webpubsub.client.operations.WebPubSubOperations
    :param endpoint: HTTP or HTTPS endpoint for the Web PubSub service instance. Required.
    :type endpoint: str
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials.TokenCredential
    :keyword api_version: Api Version. Default value is "2021-10-01". Note that overriding this
     default value may result in unsupported behavior.
    :paramtype api_version: str
    """

    _credential: WebPubSubClientCredential = None
    _state: WebPubSubClientState = WebPubSubClientState.STOPPED
    _ack_id: int = 0

    @overload
    def __init__(
        self,
        credential: WebPubSubClientCredential,
        options: Optional[WebPubSubClientOptions] = None,
        **kwargs: Any
    ) -> None:
        ...

    @overload
    def __init__(
        self,
        client_access_url: str,
        options: Optional[WebPubSubClientOptions] = None,
        **kwargs: Any
    ) -> None:
        ...

    def __init__(
        self,
        credential: Optional[WebPubSubClientCredential],
        client_access_url: Optional[str],
        options: Optional[WebPubSubClientOptions] = None,
        **kwargs: Any
    ) -> None:
        if credential:
            self._credential = credential
        elif client_access_url:
            self._credential = WebPubSubClientCredential(client_access_url)
        else:
            raise TypeError("Please input parameter credential or client_access_url")

        if options is None:
            options = WebPubSubClientOptions()
        self.build_default_options(options)
        self._options = options
        self._message_retry_policy = RetryPolicy(self._options.message_retry_options)
        self._reconnect_retry_policy = RetryPolicy(
            WebPubSubRetryOptions(
                max_retries=sys.maxint, retry_delay_in_ms=1000, mode="Fixed"
            )
        )
        self._protocol = self._options.protocol
        self._group_map: Dict[str, WebPubSubGroup] = {}
        self._ack_map: Dict[int, WebPubSubGroup] = {}
        self._sequence_id = SequenceId()
        self._state = WebPubSubClientState.STOPPED
        self._ack_id = 0

    def build_default_options(options: WebPubSubClientOptions):
        pass
