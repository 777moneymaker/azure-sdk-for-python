# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import SpeechClientTestBase, SpeechPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSpeech(SpeechClientTestBase):
    @SpeechPreparer()
    @recorded_by_proxy
    def test_submit_transcription(self, speech_endpoint):
        client = self.create_client(endpoint=speech_endpoint)
        response = client.submit_transcription(
            transcription={
                "displayName": "str",
                "locale": "str",
                "properties": {
                    "timeToLive": "str",
                    "channels": [0],
                    "destinationContainerUrl": "str",
                    "diarization": {"enabled": bool, "maxSpeakers": 0},
                    "displayFormWordLevelTimestampsEnabled": bool,
                    "duration": "str",
                    "error": {"code": "str", "message": "str"},
                    "languageIdentification": {
                        "candidateLocales": ["str"],
                        "mode": "str",
                        "speechModelMapping": {"str": {"self": "str"}},
                    },
                    "profanityFilterMode": "str",
                    "punctuationMode": "str",
                    "wordLevelTimestampsEnabled": bool,
                },
                "contentContainerUrl": "str",
                "contentUrls": ["str"],
                "createdDateTime": "2020-02-20 00:00:00",
                "customProperties": {"str": "str"},
                "dataset": {"self": "str"},
                "description": "str",
                "lastActionDateTime": "2020-02-20 00:00:00",
                "links": {"files": "str"},
                "model": {"self": "str"},
                "project": {"self": "str"},
                "self": "str",
                "status": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @SpeechPreparer()
    @recorded_by_proxy
    def test_transcribe_transcription(self, speech_endpoint):
        client = self.create_client(endpoint=speech_endpoint)
        response = client.transcribe_transcription(
            body={
                "audio": "filetype",
                "definition": {
                    "channels": [0],
                    "diarization": {"enabled": bool, "maxSpeakers": 0},
                    "locales": ["str"],
                    "models": {"str": "str"},
                    "profanityFilterMode": "str",
                },
            },
            audio="filetype",
        )

        # please add some check logic here by yourself
        # ...

    @SpeechPreparer()
    @recorded_by_proxy
    def test_get_transcriptions(self, speech_endpoint):
        client = self.create_client(endpoint=speech_endpoint)
        response = client.get_transcriptions()

        # please add some check logic here by yourself
        # ...

    @SpeechPreparer()
    @recorded_by_proxy
    def test_get_transcription(self, speech_endpoint):
        client = self.create_client(endpoint=speech_endpoint)
        response = client.get_transcription(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @SpeechPreparer()
    @recorded_by_proxy
    def test_patch_transcription(self, speech_endpoint):
        client = self.create_client(endpoint=speech_endpoint)
        response = client.patch_transcription(
            id="str",
            transcription_update={
                "customProperties": {"str": "str"},
                "description": "str",
                "displayName": "str",
                "project": {"self": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @SpeechPreparer()
    @recorded_by_proxy
    def test_delete_transcription(self, speech_endpoint):
        client = self.create_client(endpoint=speech_endpoint)
        response = client.delete_transcription(
            id="str",
        )

        # please add some check logic here by yourself
        # ...
