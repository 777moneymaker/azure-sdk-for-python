# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class CombinedPhrases(_model_base.Model):
    """CombinedPhrases.


    :ivar channel: The 0-based channel index. Only present if channel separation is enabled.
    :vartype channel: int
    :ivar text: The complete transcribed text for the channel. Required.
    :vartype text: str
    """

    channel: Optional[int] = rest_field()
    """The 0-based channel index. Only present if channel separation is enabled."""
    text: str = rest_field()
    """The complete transcribed text for the channel. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        channel: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiarizationProperties(_model_base.Model):
    """DiarizationProperties.

    :ivar enabled: A value indicating whether speaker diarization is enabled.
    :vartype enabled: bool
    :ivar max_speakers: A hint for the maximum number of speakers for diarization. Must be greater
     than 1 and less than 36.
    :vartype max_speakers: int
    """

    enabled: Optional[bool] = rest_field()
    """A value indicating whether speaker diarization is enabled."""
    max_speakers: Optional[int] = rest_field(name="maxSpeakers")
    """A hint for the maximum number of speakers for diarization. Must be greater than 1 and less than
     36."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        max_speakers: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EntityError(_model_base.Model):
    """EntityError.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The code of this error.
    :vartype code: str
    :ivar message: The message for this error.
    :vartype message: str
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The code of this error."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The message for this error."""


class EntityReference(_model_base.Model):
    """EntityReference.


    :ivar self_property: Required.
    :vartype self_property: str
    """

    self_property: str = rest_field(name="self")
    """Required."""

    @overload
    def __init__(
        self,
        *,
        self_property: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Error(_model_base.Model):
    """New format which conforms to the new Cognitive Services API guidelines which is available at
    https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
    This contains an outer error with error code, message, details, target and an inner error with
    more descriptive details.

    :ivar code: Known values are: "InvalidRequest", "InvalidArgument", "InternalServerError",
     "ServiceUnavailable", "NotFound", "PipelineError", "Conflict", "InternalCommunicationFailed",
     "Forbidden", "NotAllowed", "Unauthorized", "UnsupportedMediaType", "TooManyRequests", and
     "UnprocessableEntity".
    :vartype code: str or ~azure.ai.speech.transcription.models.ErrorCode
    :ivar details: Additional supportive details regarding the error and/or expected policies.
    :vartype details: list[~azure.ai.speech.transcription.models.Error]
    :ivar message: High level error message.
    :vartype message: str
    :ivar target: The source of the error.
     For example it would be "documents" or "document id" in case of invalid document.
    :vartype target: str
    :ivar inner_error:
    :vartype inner_error: ~azure.ai.speech.transcription.models.InnerError
    """

    code: Optional[Union[str, "_models.ErrorCode"]] = rest_field()
    """Known values are: \"InvalidRequest\", \"InvalidArgument\", \"InternalServerError\",
     \"ServiceUnavailable\", \"NotFound\", \"PipelineError\", \"Conflict\",
     \"InternalCommunicationFailed\", \"Forbidden\", \"NotAllowed\", \"Unauthorized\",
     \"UnsupportedMediaType\", \"TooManyRequests\", and \"UnprocessableEntity\"."""
    details: Optional[List["_models.Error"]] = rest_field()
    """Additional supportive details regarding the error and/or expected policies."""
    message: Optional[str] = rest_field()
    """High level error message."""
    target: Optional[str] = rest_field()
    """The source of the error.
     For example it would be \"documents\" or \"document id\" in case of invalid document."""
    inner_error: Optional["_models.InnerError"] = rest_field(name="innerError")

    @overload
    def __init__(
        self,
        *,
        code: Optional[Union[str, "_models.ErrorCode"]] = None,
        details: Optional[List["_models.Error"]] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        inner_error: Optional["_models.InnerError"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LanguageIdentificationProperties(_model_base.Model):
    """LanguageIdentificationProperties.


    :ivar mode: Known values are: "Continuous" and "Single".
    :vartype mode: str or ~azure.ai.speech.transcription.models.LanguageIdentificationMode
    :ivar candidate_locales: The candidate locales for language identification (example ["en-US",
     "de-DE", "es-ES"]). A minimum of 2 and a maximum of 10 candidate locales, including the main
     locale for the transcription, is supported for continuous mode. For single language
     identification, the maximum number of candidate locales is unbounded. Required.
    :vartype candidate_locales: list[str]
    :ivar speech_model_mapping: An optional mapping of locales to speech model entities. If no
     model is given for a locale, the default base model is used.
     Keys must be locales contained in the candidate locales, values are entities for models of the
     respective locales.
    :vartype speech_model_mapping: dict[str, ~azure.ai.speech.transcription.models.EntityReference]
    """

    mode: Optional[Union[str, "_models.LanguageIdentificationMode"]] = rest_field()
    """Known values are: \"Continuous\" and \"Single\"."""
    candidate_locales: List[str] = rest_field(name="candidateLocales")
    """The candidate locales for language identification (example [\"en-US\", \"de-DE\", \"es-ES\"]).
     A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the
     transcription, is supported for continuous mode. For single language identification, the
     maximum number of candidate locales is unbounded. Required."""
    speech_model_mapping: Optional[Dict[str, "_models.EntityReference"]] = rest_field(name="speechModelMapping")
    """An optional mapping of locales to speech model entities. If no model is given for a locale, the
     default base model is used.
     Keys must be locales contained in the candidate locales, values are entities for models of the
     respective locales."""

    @overload
    def __init__(
        self,
        *,
        candidate_locales: List[str],
        mode: Optional[Union[str, "_models.LanguageIdentificationMode"]] = None,
        speech_model_mapping: Optional[Dict[str, "_models.EntityReference"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PageableTranscription(_model_base.Model):
    """PageableTranscription.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar values_property: A list of entities limited by either the passed query parameters 'skip'
     and 'top' or their default values.

     When iterating through a list using pagination and deleting entities in parallel, some
     entities will be skipped in the results.
     It's recommended to build a list on the client and delete after the fetching of the complete
     list.
    :vartype values_property: list[~azure.ai.speech.transcription.models.Transcription]
    :ivar _next_link: A link to the next set of paginated results if there are more entities
     available; otherwise null.
    :vartype _next_link: str
    """

    values_property: Optional[List["_models.Transcription"]] = rest_field(name="values", visibility=["read"])
    """A list of entities limited by either the passed query parameters 'skip' and 'top' or their
     default values.
     
     When iterating through a list using pagination and deleting entities in parallel, some entities
     will be skipped in the results.
     It's recommended to build a list on the client and delete after the fetching of the complete
     list."""
    _next_link: Optional[str] = rest_field(name="@nextLink", visibility=["read"])
    """A link to the next set of paginated results if there are more entities available; otherwise
     null."""


class Phrase(_model_base.Model):
    """Phrase.


    :ivar channel: The 0-based channel index. Only present if channel separation is enabled.
    :vartype channel: int
    :ivar speaker: The speaker number. Only present if speaker diarization is enabled.
    :vartype speaker: int
    :ivar offset_milliseconds: The start offset of the phrase in milliseconds. Required.
    :vartype offset_milliseconds: int
    :ivar duration_milliseconds: The duration of the phrase in milliseconds. Required.
    :vartype duration_milliseconds: int
    :ivar text: The transcribed text of the phrase. Required.
    :vartype text: str
    :ivar words: The words that make up the phrase. Only present if word-level timestamps are
     enabled.
    :vartype words: list[~azure.ai.speech.transcription.models.Word]
    :ivar locale: The locale of the phrase.
    :vartype locale: str
    :ivar confidence: The confidence value for the phrase. Required.
    :vartype confidence: float
    """

    channel: Optional[int] = rest_field()
    """The 0-based channel index. Only present if channel separation is enabled."""
    speaker: Optional[int] = rest_field()
    """The speaker number. Only present if speaker diarization is enabled."""
    offset_milliseconds: int = rest_field(name="offsetMilliseconds")
    """The start offset of the phrase in milliseconds. Required."""
    duration_milliseconds: int = rest_field(name="durationMilliseconds")
    """The duration of the phrase in milliseconds. Required."""
    text: str = rest_field()
    """The transcribed text of the phrase. Required."""
    words: Optional[List["_models.Word"]] = rest_field()
    """The words that make up the phrase. Only present if word-level timestamps are enabled."""
    locale: Optional[str] = rest_field()
    """The locale of the phrase."""
    confidence: float = rest_field()
    """The confidence value for the phrase. Required."""

    @overload
    def __init__(
        self,
        *,
        offset_milliseconds: int,
        duration_milliseconds: int,
        text: str,
        confidence: float,
        channel: Optional[int] = None,
        speaker: Optional[int] = None,
        words: Optional[List["_models.Word"]] = None,
        locale: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscribeDefinition(_model_base.Model):
    """Metadata for a fast transcription request.

    :ivar locales: A list of possible locales for the transcription. If not specified, the locale
     of the speech in the audio is detected automatically from all supported locales.
    :vartype locales: list[str]
    :ivar models: Maps some or all candidate locales to a model URI to be used for transcription.
     If no mapping is given, the default model for the locale is used.
    :vartype models: dict[str, str]
    :ivar profanity_filter_mode: Known values are: "None", "Removed", "Tags", and "Masked".
    :vartype profanity_filter_mode: str or
     ~azure.ai.speech.transcription.models.ProfanityFilterMode
    :ivar diarization:
    :vartype diarization: ~azure.ai.speech.transcription.models.TranscribeDiarizationProperties
    :ivar channels: The 0-based indices of the channels to be transcribed separately. If not
     specified, multiple channels are merged and transcribed jointly. Only up to two channels are
     supported.
    :vartype channels: list[int]
    """

    locales: Optional[List[str]] = rest_field()
    """A list of possible locales for the transcription. If not specified, the locale of the speech in
     the audio is detected automatically from all supported locales."""
    models: Optional[Dict[str, str]] = rest_field()
    """Maps some or all candidate locales to a model URI to be used for transcription. If no mapping
     is given, the default model for the locale is used."""
    profanity_filter_mode: Optional[Union[str, "_models.ProfanityFilterMode"]] = rest_field(name="profanityFilterMode")
    """Known values are: \"None\", \"Removed\", \"Tags\", and \"Masked\"."""
    diarization: Optional["_models.TranscribeDiarizationProperties"] = rest_field()
    channels: Optional[List[int]] = rest_field()
    """The 0-based indices of the channels to be transcribed separately. If not specified, multiple
     channels are merged and transcribed jointly. Only up to two channels are supported."""

    @overload
    def __init__(
        self,
        *,
        locales: Optional[List[str]] = None,
        models: Optional[Dict[str, str]] = None,
        profanity_filter_mode: Optional[Union[str, "_models.ProfanityFilterMode"]] = None,
        diarization: Optional["_models.TranscribeDiarizationProperties"] = None,
        channels: Optional[List[int]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscribeDiarizationProperties(_model_base.Model):
    """The diarization settings. Diarization settings must be specified to enable diarization.

    :ivar enabled: Gets or sets a value indicating whether speaker diarization is enabled.
    :vartype enabled: bool
    :ivar max_speakers: Gets or sets a hint for the maximum number of speakers for diarization.
     Must be greater than 1 and less than 36.
    :vartype max_speakers: int
    """

    enabled: Optional[bool] = rest_field()
    """Gets or sets a value indicating whether speaker diarization is enabled."""
    max_speakers: Optional[int] = rest_field(name="maxSpeakers")
    """Gets or sets a hint for the maximum number of speakers for diarization. Must be greater than 1
     and less than 36."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        max_speakers: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscribeResult(_model_base.Model):
    """The result of the transcribe operation.


    :ivar duration_milliseconds: The duration of the audio in milliseconds. Required.
    :vartype duration_milliseconds: int
    :ivar combined_phrases: The combined transcription results for each channel. Required.
    :vartype combined_phrases: list[~azure.ai.speech.transcription.models.CombinedPhrases]
    :ivar phrases: The transcription results segmented into phrases. Required.
    :vartype phrases: list[~azure.ai.speech.transcription.models.Phrase]
    """

    duration_milliseconds: int = rest_field(name="durationMilliseconds")
    """The duration of the audio in milliseconds. Required."""
    combined_phrases: List["_models.CombinedPhrases"] = rest_field(name="combinedPhrases")
    """The combined transcription results for each channel. Required."""
    phrases: List["_models.Phrase"] = rest_field()
    """The transcription results segmented into phrases. Required."""

    @overload
    def __init__(
        self,
        *,
        duration_milliseconds: int,
        combined_phrases: List["_models.CombinedPhrases"],
        phrases: List["_models.Phrase"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Transcription(_model_base.Model):
    """Transcription.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar links:
    :vartype links: ~azure.ai.speech.transcription.models.TranscriptionLinks
    :ivar properties: Required.
    :vartype properties: ~azure.ai.speech.transcription.models.TranscriptionProperties
    :ivar self_property:
    :vartype self_property: str
    :ivar model:
    :vartype model: ~azure.ai.speech.transcription.models.EntityReference
    :ivar dataset:
    :vartype dataset: ~azure.ai.speech.transcription.models.EntityReference
    :ivar content_urls: A list of content urls to get audio files to transcribe. Up to 1000 urls
     are allowed.
     This property will not be returned in a response.
    :vartype content_urls: list[str]
    :ivar content_container_url: A URL for an Azure blob container that contains the audio files. A
     container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
     The maximum size for a blob is 2.5GB.
     Container SAS should contain 'r' (read) and 'l' (list) permissions.
     This property will not be returned in a response.
    :vartype content_container_url: str
    :ivar locale: The locale of the contained data. If Language Identification is used, this locale
     is used to transcribe speech for which no language could be detected. Required.
    :vartype locale: str
    :ivar display_name: The display name of the object. Required.
    :vartype display_name: str
    :ivar description: The description of the object.
    :vartype description: str
    :ivar custom_properties: The custom properties of this entity. The maximum allowed key length
     is 64 characters, the maximum
     allowed value length is 256 characters and the count of allowed entries is 10.
    :vartype custom_properties: dict[str, str]
    :ivar project:
    :vartype project: ~azure.ai.speech.transcription.models.EntityReference
    :ivar last_action_date_time: The time-stamp when the current status was entered.
     The time stamp is encoded as ISO 8601 date and time format
     ("YYYY-MM-DDThh:mm:ssZ", see
     https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
    :vartype last_action_date_time: ~datetime.datetime
    :ivar status: Known values are: "NotStarted", "Running", "Succeeded", and "Failed".
    :vartype status: str or ~azure.ai.speech.transcription.models.Status
    :ivar created_date_time: The time-stamp when the object was created.
     The time stamp is encoded as ISO 8601 date and time format
     ("YYYY-MM-DDThh:mm:ssZ", see
     https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
    :vartype created_date_time: ~datetime.datetime
    """

    links: Optional["_models.TranscriptionLinks"] = rest_field()
    properties: "_models.TranscriptionProperties" = rest_field()
    """Required."""
    self_property: Optional[str] = rest_field(name="self", visibility=["read"])
    model: Optional["_models.EntityReference"] = rest_field()
    dataset: Optional["_models.EntityReference"] = rest_field()
    content_urls: Optional[List[str]] = rest_field(name="contentUrls")
    """A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
     This property will not be returned in a response."""
    content_container_url: Optional[str] = rest_field(name="contentContainerUrl")
    """A URL for an Azure blob container that contains the audio files. A container is allowed to have
     a maximum size of 5GB and a maximum number of 10000 blobs.
     The maximum size for a blob is 2.5GB.
     Container SAS should contain 'r' (read) and 'l' (list) permissions.
     This property will not be returned in a response."""
    locale: str = rest_field()
    """The locale of the contained data. If Language Identification is used, this locale is used to
     transcribe speech for which no language could be detected. Required."""
    display_name: str = rest_field(name="displayName")
    """The display name of the object. Required."""
    description: Optional[str] = rest_field()
    """The description of the object."""
    custom_properties: Optional[Dict[str, str]] = rest_field(name="customProperties")
    """The custom properties of this entity. The maximum allowed key length is 64 characters, the
     maximum
     allowed value length is 256 characters and the count of allowed entries is 10."""
    project: Optional["_models.EntityReference"] = rest_field()
    last_action_date_time: Optional[datetime.datetime] = rest_field(
        name="lastActionDateTime", visibility=["read"], format="rfc3339"
    )
    """The time-stamp when the current status was entered.
     The time stamp is encoded as ISO 8601 date and time format
     (\"YYYY-MM-DDThh:mm:ssZ\", see
     https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)."""
    status: Optional[Union[str, "_models.Status"]] = rest_field()
    """Known values are: \"NotStarted\", \"Running\", \"Succeeded\", and \"Failed\"."""
    created_date_time: Optional[datetime.datetime] = rest_field(
        name="createdDateTime", visibility=["read"], format="rfc3339"
    )
    """The time-stamp when the object was created.
     The time stamp is encoded as ISO 8601 date and time format
     (\"YYYY-MM-DDThh:mm:ssZ\", see
     https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)."""

    @overload
    def __init__(
        self,
        *,
        properties: "_models.TranscriptionProperties",
        locale: str,
        display_name: str,
        links: Optional["_models.TranscriptionLinks"] = None,
        model: Optional["_models.EntityReference"] = None,
        dataset: Optional["_models.EntityReference"] = None,
        content_urls: Optional[List[str]] = None,
        content_container_url: Optional[str] = None,
        description: Optional[str] = None,
        custom_properties: Optional[Dict[str, str]] = None,
        project: Optional["_models.EntityReference"] = None,
        status: Optional[Union[str, "_models.Status"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptionLinks(_model_base.Model):
    """TranscriptionLinks.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar files:
    :vartype files: str
    """

    files: Optional[str] = rest_field(visibility=["read"])


class TranscriptionProperties(_model_base.Model):
    """TranscriptionProperties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar word_level_timestamps_enabled:
    :vartype word_level_timestamps_enabled: bool
    :ivar display_form_word_level_timestamps_enabled:
    :vartype display_form_word_level_timestamps_enabled: bool
    :ivar duration:
    :vartype duration: str
    :ivar channels:
    :vartype channels: list[int]
    :ivar destination_container_url:
    :vartype destination_container_url: str
    :ivar punctuation_mode: Known values are: "None", "Dictated", "Automatic", and
     "DictatedAndAutomatic".
    :vartype punctuation_mode: str or ~azure.ai.speech.transcription.models.PunctuationMode
    :ivar profanity_filter_mode: Known values are: "None", "Removed", "Tags", and "Masked".
    :vartype profanity_filter_mode: str or
     ~azure.ai.speech.transcription.models.ProfanityFilterMode
    :ivar time_to_live: Required.
    :vartype time_to_live: str
    :ivar error:
    :vartype error: ~azure.ai.speech.transcription.models.EntityError
    :ivar diarization:
    :vartype diarization: ~azure.ai.speech.transcription.models.DiarizationProperties
    :ivar language_identification:
    :vartype language_identification:
     ~azure.ai.speech.transcription.models.LanguageIdentificationProperties
    """

    word_level_timestamps_enabled: Optional[bool] = rest_field(name="wordLevelTimestampsEnabled")
    display_form_word_level_timestamps_enabled: Optional[bool] = rest_field(
        name="displayFormWordLevelTimestampsEnabled"
    )
    duration: Optional[str] = rest_field(visibility=["read"])
    channels: Optional[List[int]] = rest_field()
    destination_container_url: Optional[str] = rest_field(name="destinationContainerUrl")
    punctuation_mode: Optional[Union[str, "_models.PunctuationMode"]] = rest_field(name="punctuationMode")
    """Known values are: \"None\", \"Dictated\", \"Automatic\", and \"DictatedAndAutomatic\"."""
    profanity_filter_mode: Optional[Union[str, "_models.ProfanityFilterMode"]] = rest_field(name="profanityFilterMode")
    """Known values are: \"None\", \"Removed\", \"Tags\", and \"Masked\"."""
    time_to_live: str = rest_field(name="timeToLive")
    """Required."""
    error: Optional["_models.EntityError"] = rest_field()
    diarization: Optional["_models.DiarizationProperties"] = rest_field()
    language_identification: Optional["_models.LanguageIdentificationProperties"] = rest_field(
        name="languageIdentification"
    )

    @overload
    def __init__(
        self,
        *,
        time_to_live: str,
        word_level_timestamps_enabled: Optional[bool] = None,
        display_form_word_level_timestamps_enabled: Optional[bool] = None,
        channels: Optional[List[int]] = None,
        destination_container_url: Optional[str] = None,
        punctuation_mode: Optional[Union[str, "_models.PunctuationMode"]] = None,
        profanity_filter_mode: Optional[Union[str, "_models.ProfanityFilterMode"]] = None,
        error: Optional["_models.EntityError"] = None,
        diarization: Optional["_models.DiarizationProperties"] = None,
        language_identification: Optional["_models.LanguageIdentificationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptionUpdate(_model_base.Model):
    """TranscriptionUpdate.

    :ivar display_name: The name of the object.
    :vartype display_name: str
    :ivar description: The description of the object.
    :vartype description: str
    :ivar custom_properties: The custom properties of this entity. The maximum allowed key length
     is 64 characters, the maximum
     allowed value length is 256 characters and the count of allowed entries is 10.
    :vartype custom_properties: dict[str, str]
    :ivar project:
    :vartype project: ~azure.ai.speech.transcription.models.EntityReference
    """

    display_name: Optional[str] = rest_field(name="displayName")
    """The name of the object."""
    description: Optional[str] = rest_field()
    """The description of the object."""
    custom_properties: Optional[Dict[str, str]] = rest_field(name="customProperties")
    """The custom properties of this entity. The maximum allowed key length is 64 characters, the
     maximum
     allowed value length is 256 characters and the count of allowed entries is 10."""
    project: Optional["_models.EntityReference"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        custom_properties: Optional[Dict[str, str]] = None,
        project: Optional["_models.EntityReference"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Word(_model_base.Model):
    """Word.


    :ivar text: The recognized word, including punctuation. Required.
    :vartype text: str
    :ivar offset_milliseconds: The start offset of the word in milliseconds. Required.
    :vartype offset_milliseconds: int
    :ivar duration_milliseconds: The duration of the word in milliseconds. Required.
    :vartype duration_milliseconds: int
    """

    text: str = rest_field()
    """The recognized word, including punctuation. Required."""
    offset_milliseconds: int = rest_field(name="offsetMilliseconds")
    """The start offset of the word in milliseconds. Required."""
    duration_milliseconds: int = rest_field(name="durationMilliseconds")
    """The duration of the word in milliseconds. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        offset_milliseconds: int,
        duration_milliseconds: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
