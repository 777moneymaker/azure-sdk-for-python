parameters:
  - name: BeforePublishSteps
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: ServiceDirectory
    type: string
    default: ''
  - name: Artifacts
    type: object
    default: []
  - name: DevFeedName
    type: string
    default: 'public/azure-sdk-for-python'
  - name: ArtifactSuffix
    type: string
    default: ''
  - name: UseVirtualEnvironment
    type: boolean
    default: true
  - name: BuildTargetingString
    type: string
    default: 'azure-*'

steps:
  - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml@self
    parameters:
      PackageName: "azure-template"
      ServiceDirectory: "template"
      TestPipeline: ${{ parameters.TestPipeline }}

  - template: /eng/common/pipelines/templates/steps/set-default-branch.yml@self

  - script: |
      echo "##vso[build.addbuildtag]Scheduled"
    displayName: 'Tag scheduled builds'
    condition: and(eq(variables['Build.SourceBranchName'], variables['DefaultBranch']), eq(variables['Build.Reason'],'Schedule'))

  - task: UsePythonVersion@0
    displayName: 'Use Python $(PythonVersion)'
    inputs:
      versionSpec: $(PythonVersion)

  - ${{ if eq(parameters.UseVirtualEnvironment, true) }}:
    - template: /eng/pipelines/templates/steps/use-venv.yml

  - pwsh: |
      which python
      python -m pip install --force -r eng/ci_tools.txt
      python -m pip freeze --all
    displayName: 'Prep Environment'

  - template: set-dev-build.yml@self

  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    - pwsh: |
        mkdir -p $(Build.ArtifactStagingDirectory)/diff
      displayName: Create PR Diff Folder

    - task: PowerShell@2
      inputs:
        filePath: 'eng/common/scripts/Generate-PR-Diff.ps1'
        arguments: '-TargetPath "$(Build.SourcesDirectory)" -ArtifactPath $(Build.ArtifactStagingDirectory)/diff'
      displayName: 'Generate PR Diff'

    - pwsh: |
        Write-Host "We freshly generated the PR diff, and this is what it sees!"
        Get-ChildItem -R -Force $(Build.ArtifactStagingDirectory)/diff | % { $_.FullName }
        cat $(Build.ArtifactStagingDirectory)/diff/diff.json
      displayName: Dump PR Diff

    - task: Powershell@2
      inputs:
        filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
        arguments: >
          -inputDiffJson $(Build.ArtifactStagingDirectory)/diff/diff.json
          -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
        pwsh: true
        workingDirectory: $(Pipeline.Workspace)
      displayName: Save package properties
  - ${{ else }}:
    - task: Powershell@2
      inputs:
        filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
        arguments: >
          -ServiceDirectory ${{parameters.ServiceDirectory}}
          -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
        pwsh: true
        workingDirectory: $(Pipeline.Workspace)
      displayName: Save package properties

  - template: /eng/pipelines/templates/steps/resolve-package-targeting.yml
    parameters:
      BuildTargetingParameter: ${{ parameters.BuildTargetingString }}
      PackagePropertiesFolder: $(Build.ArtifactStagingDirectory)/PackageInfo
      TargetRepo: $(Build.SourcesDirectory)

  - script: |
      sudo apt-get update
      sudo apt-get install -y qemu-user-static
      sudo update-binfmts --enable qemu-aarch64
    displayName: 'Install QEMU Dependencies'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  - pwsh: |
      which python
      python --version
      Write-Host "Invoking with '$(TargetingString)'"
      sdk_build -d "$(Build.ArtifactStagingDirectory)" "$(TargetingString)" --service=${{parameters.ServiceDirectory}} --inactive
    displayName: 'Generate Packages'
    timeoutInMinutes: 80
    env:
      CIBW_BUILD_VERBOSITY: 3

  - script: |
      python -m pip install -r eng/release_requirements.txt
      twine check $(Build.ArtifactStagingDirectory)/**/*.whl
      twine check $(Build.ArtifactStagingDirectory)/**/*.tar.gz
    displayName: 'Verify Readme'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  - ${{ parameters.BeforePublishSteps }}

  - ${{ if eq(parameters.ArtifactSuffix, '') }}:
    - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
      parameters:
        ArtifactPath: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'packages'

  - ${{ if ne(parameters.ArtifactSuffix, '') }}:
    - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
      parameters:
        ArtifactPath: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'packages_${{ parameters.ArtifactSuffix }}'
