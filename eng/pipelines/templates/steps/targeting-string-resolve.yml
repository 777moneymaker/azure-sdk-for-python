parameters:
  - name: BuildTargetingString
    type: string
    default: 'azure-*'
  - name: GeneratePRDiff
    type: boolean
    default: false
  - name: TargetRepo
    type: string
    default: $(Build.SourcesDirectory)
  - name: PackagePropertiesFolder
    type: string

steps:
  # if triggered for a PR, handle PR diff side
  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    - ${{ if parameters.GeneratePRDiff }}:
      - pwsh: |
          mkdir -p ${{ parameters.PRDiffFolder }}
        displayName: Create PR Diff Folder
      - task: PowerShell@2
        inputs:
          filePath: 'eng/common/scripts/Generate-PR-Diff.ps1'
          arguments: '-TargetPath ${{ parameters.TargetRepo }} -ArtifactPath ${{ parameters.PRDiffFolder }}'
        displayName: 'Compare PR changes to targeting string'

      - pwsh: |
          Write-Host "We freshly generated the PR diff, and this is what it sees!"
          Get-ChildItem -R -Force ${{ parameters.PRDiffFolder }} | % { $_.FullName }
          cat ${{ parameters.PRDiffFolder }}/diff.json
          Write-Host "##vso[task.setvariable variable=PRDiffJson;]${{ parameters.PRDiffFolder }}/diff.json"
        displayName: Coalesce targeting string for PR Builds
    - ${{ else }}:
      - pwsh: |
          Write-Host "We are in a PR, but a job that doesn't generate the pr diff itself. This is what we see!"
          Get-ChildItem -Recurse -Force "$(Build.ArtifactStagingDirectory)" | % { $_.FullName }
          Write-Host "##vso[task.setvariable variable=PRDiffJson;]${{ parameters.PRDiffFolder }}/diff.json"
        displayName: Coalesce targeting string for PR Builds
    - pwsh: |
        # code this shit to honor look for package properties files and then invoke checks for any one that exists
      displayName: Resolve Targeted Packages
  # if not triggered for a PR, simply attempt to locate the targeted packages from the parameter and variable. (standard for internal builds)
  - ${{ else }}:
    - pwsh: |
        $setting = "${{ parameters.BuildTargetingString }}"
        # if the variable is not set, it'll just come back as the variable name. otherwise it's set.
        if ('$(BuildTargetingString)' -ne ('$' + '(BuildTargetingString)')) {
            Write-Host "The variable named BuildTargetingString is set to $(BuildTargetingString)"
            $setting = "$(BuildTargetingString)"
        }
        else {
          Write-Host "We are falling back to the parameter value ${{ parameters.BuildTargetingString }}"
        }
        Write-Host "Setting TargetingString to $setting"
        Write-Host "##vso[task.setvariable variable=TargetingString;]$setting"
      displayName: Check override of targeting string by variable for individual build
      condition: and(succeededOrFailed(), eq(variables['TargetingString'],''))